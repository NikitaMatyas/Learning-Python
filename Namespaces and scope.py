# Пространства имен и область определения

'''
Имя может ссылаться на несколько разных вещей в зависимости от того, где оно используется.
Программы в Python могут иметь разные пространтства имен - разделы, внутри которых определенное имя уникальное и не
связано с такими же именами в других пространствах имен.

Каждая функция определяет собственное пространство имен. Если вы определите переменную, которая называется X в основной
программе, и другую переменную X в отдельной функции, они будут ссылаться на разные значения. Но эту стену можно
пробить: если нужно, вы можете получить доступ к именам других пространств разными способами.

В основной программе определяется глобальное пространство имен, поэтому переменные, находящиеся в этом пространстве
имен, являются глобальными.
'''


# Можно получить значение глобальной переменной внутри функции:
animal = 'fruitbat'


def print_global():
    print('inside print_global:', animal)


print('at the top level:', animal)
print_global()

# Но если попробовать получить значение глобальной переменной и изменить его внутри функции, получим ошибку


# Если просто изменить имя, то изменится и другая переменная, находящаяся внутри функции
def change_local():
    animal = 'wombat'
    print('inside change_local:', animal, id(animal))


change_local()
print(animal, id(animal))

'''
Мы присвоили строку 'fruitbat' глобальной переменной с именем animal. 
Функция change_local() также имеет переменную animal, но она находится в ее локальном пространстве имен.

Функция id() используется чтобы вывести на экран уникальное значение каждого объекта и доказать, что переменная 
animal, расположенная внутри функции change_local(), - это не переменная animal, расположенная на основном
уровне программы.

Чтобы получить доступ к глобальной переменной вместо локальной переменной внутри функции, нужно явно использовать
ключевое слово global
'''

animal = 'fruitbat'
print('\n')


def change_and_print_global():
    global animal
    animal = 'wombat'
    print('inside change_and_print_global:', animal, id(animal))


# После вызова функции изменится значение глобальной переменной
print(animal, id(animal))
change_and_print_global()
print(animal, id(animal))

# locals() - возвращает словарь, содержащий имена локального пространства имен
# global() - возвращает словарь, содержащий имена глобального пространства имен

cat = 'global cat'


def change_local():
    cat = 'local cat'  # локальная переменная
    print('locals:', locals())


change_local()
# Аналогично можно использоват
globals()

# Использование _ и __ а именах
'''
Имена, которые начинаются с двух нижних подчеркиваний (__), зарезирвированы для использования внутри Python, поэтому
не следует применять их для своих переменных.

Например, имя функции находится в системной переменной function.__name__, а имя ее строки документации - 
function.__doc__
'''


def amazing():
    """ This is the amazing function.
    Want to see it again? """
    print('This function is named:', amazing.__name__)
    print('And its docstring is:', amazing.__doc__)


amazing()
